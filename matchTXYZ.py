

#===================================
#        Chengwen Liu              #
#      liuchw2010@gmail.com        #
#   University of Texas at Austin  #
#===================================

# === about ===
# Using fingerprint to automatically match the atom type, this script has two functions:
# 1. Generate a tinker-xyz file based on a "normal xyz" file and a template tinker-xyz file
# 2. Generate a tinker-xyz file based on a "tinker xyz" file and a template tinker-xyz file
# === How to use ===

''' python matchTXYZ.py template.txyz dealwith.(t)xyz '''

import os,sys

def readTXYZ(TXYZ, singleAtom=False, tailOnly=False):
  atoms=[];coord=[]; tails = []
  order=[];types=[];connections=[]
  for line in open(TXYZ).readlines()[1:] 
    data=line.split()
    order.append(data[0])
    types.append(data[5])
    connections.append(data[6:])
    idxstr = " " + data[5] + " "
    idx = line.index(idxstr)
    tails.append(line[idx:])
    if singleAtom:
      atoms.append(data[1][0])
    else:
      atoms.append(data[1])
    coord.append([float(data[2]), float(data[3]), float(data[4])])
  if tailOnly:
    return tails
  else:
    return atoms,coord,order,types,connections

def fingerprint(TXYZ):
  atoms, _, order, _, connections =  readTXYZ(TXYZ, singleAtom=False)
  atom_dict = {}
  fp = []
  for i, j in zip(order, connections):
    if i not in atom_dict:
      atom_dict[i] = j 
  for i,j in atom_dict.items():
    fpstr = ''
    for k in j:
      l = atom_dict[k]
      for m in l:
        n = atom_dict[m]
        for o in n:
          fpstr += atoms[int(o)-1]
    fpstr = ''.join(sorted(fpstr)) 
    fpstr = atoms[int(i)-1] + "->" + fpstr
    fp.append(fpstr)
  return fp

def xyz2txyz(xyz, indexInit=666):
  atoms = []; coord = []
  for line in open(xyz).readlines()[2:]:
    data = line.split()
    if len(data) == 4:
      atoms.append(data[0])
      coord.append([float(data[1]), float(data[2]), float(data[3])])

  connections = []
  os.system("babel -ixyz %s -opdb tmp.pdb"%xyz)
  for line in open("tmp.pdb").readlines():
    if "CONECT" in line:
      connections.append(line[11:51])

  fileName = xyz.replace("xyz", "txyz")
  with open(fileName, 'w') as ofile: 
    ofile.write("%3s Generated by chemFileConvert.py\n" %len(atoms))
    for i in range(len(atoms)):
      ofile.write("%3s %3s %12.6f%12.6f%12.6f %3s %s\n" %(i+1, atoms[i], coord[i][0], coord[i][1], coord[i][2], (int(indexInit) + i), connections[i]))
  return

def main():
  template = sys.argv[1]
  dealwith = sys.argv[2]
  if os.path.splitext(dealwith)[1] == ".txyz":
    fname = dealwith + "_2" 
  if os.path.splitext(dealwith)[1] == ".xyz":
    xyz2txyz(dealwith)
    dealwith = dealwith.replace("xyz", "txyz")
    fname = dealwith + "_2" 
  fp1 = fingerprint(template)
  fp2 = fingerprint(dealwith)
  newidx = []
  for i in fp1:
    if i in fp2:
      idx = fp2.index(i)
      newidx.append(idx)
      fp2[idx] = ' '
    else:
      print("TWO STRUCTURES DIFFER! PLEASE CHECK !")
  atoms, coord, _, _, _ =  readTXYZ(dealwith, singleAtom=True)
  tails = readTXYZ(template,tailOnly=True)
  with open(fname, 'w') as f:
    f.write("%3s\n"%len(atoms))
    for i in range(len(newidx)):
      idx = int(newidx[i])
      f.write("%3s%3s%12.6f%12.6f%12.6f   %s"%(i+1,atoms[idx], coord[idx][0], coord[idx][1], coord[idx][2], tails[i]))
  return

if __name__ == "__main__":
  main()
