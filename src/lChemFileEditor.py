
#===================================
#        Chengwen Liu              #
#      liuchw2010@gmail.com        #
#   University of Texas at Austin  #
#===================================

import os
import sys
import argparse
import numpy as np
import networkx as nx

''' split the pdb into pdbs '''
def splitpdb(pdb):
  resnames = []
  resids = []
  lines = open(pdb).readlines()
  for line in lines:
    if ("TER" in line) or ("END" in line) or ("CRYST" in line):
      lines.remove(line)
  curresid = lines[0][22:26]
  curresnm = lines[0][17:21]
  pdbstr = []
  pdbs = []
  number = 0

  for line in lines:
    if (line[22:26] == curresid) and (curresnm == line[17:21]):
      atom = line.split()[-1] 
      x = float(line[30:38])
      y = float(line[38:46])
      z = float(line[46:54])
      pdbstr.append(line)
    else:
      pdbname = "%04d"%number + f"_{curresnm.split()[0]}.pdb"
      pdbs.append(pdbname)
      with open(pdbname, 'w') as f:
        for s in pdbstr:
          f.write(s)
      number += 1
      curresid = line[22:26]
      curresnm = line[17:21]
      atom = line.split()[-1] 
      x = float(line[30:38])
      y = float(line[38:46])
      z = float(line[46:54])
      pdbstr = [line,]
  pdbname = "%04d"%number + f"_{curresnm.split()[0]}.pdb"
  pdbs.append(pdbname)
  
  with open(pdbname, 'w') as f:
    for s in pdbstr:
      f.write(s)
  
  with open('pdblist', 'w') as f:
    for p in pdbs:
      f.write(p + '\n')
  return

''' combine the pdbs to one pdb with good atom and residue number'''
def combinepdbs():
  pdbs = np.loadtxt("pdblist", dtype='str', unpack=True)
  atomnumber = 0
  residuenumber = 0
  with open(inp + "_2", "w") as f:
    for p in pdbs:
      residuenumber += 1
      residuenumberstr = "%4s"%residuenumber
      lines = open(p).readlines()
      for l in lines:
        atomnumber += 1
        atomnumberstr = "%5s"%atomnumber
        l = l[:6] + atomnumberstr + l[11:22] + residuenumberstr + l[26:]
        f.write(l)
  for p in pdbs:
    os.remove(p)
  os.remove("pdblist")
  return

''' split a txyz file to monomers '''
def splittxyz(txyz):
  g = nx.Graph()
  nodes = []
  edges = []
  atom_line = {}
  lines = open(txyz).readlines()
  for line in lines[1:]:
    d = line.split()
    atom_line[int(d[0])] = line
    if d[0] not in nodes: 
      nodes.append(int(d[0]))
    for c in d[6:]:
      s = sorted([int(d[0]), int(c)])
      if s not in edges:
        edges.append(s)
  
  g.add_nodes_from(nodes)
  g.add_edges_from(edges)
        
  monomers = nx.connected_components(g)
  monoid = 0
  fname, _ = os.path.splitext(txyz)
  for m in monomers:
    atoms = sorted(list(m))
    mononame = f"{fname}_mono_{monoid:04d}.txyz"
    with open(mononame, 'w') as f:
      f.write(f"{len(atoms):>5d}\n")
      for a in atoms:
        f.write(atom_line[a])
    nicertxyz(mononame)
    os.system(f"mv {mononame}_2 {mononame}")
    monoid += 1
  return

''' write a nicer txyz file '''
def nicertxyz(txyz):
  lines = open(txyz).readlines()[1:] 
  atoms = []
  coords = []
  elements = []
  types = []
  connections = []
  for line in lines:
    d = line.split()
    atoms.append(d[0])
    elements.append(d[1])
    coords.append([float(d[2]), float(d[3]), float(d[4])])
    types.append(d[5])
    connections.append(d[6:])
  
  newtypes = []
  atom_element = dict(zip(atoms, elements))
  with open("tmp.xyz", 'w') as f:
    tmp = []
    f.write(f"{len(atoms):>6d}\n\n")
    for i in range(len(atoms)):
      if atoms[i] not in tmp:
        f.write(f"{elements[i]:>3s}{coords[i][0]:>14.6f}{coords[i][1]:>14.6f}{coords[i][2]:>14.6f}\n")
        tmp.append(atoms[i])
        newtypes.append(types[i])
      for c in connections[i]:
        if atom_element[c].upper() == "H":
          j = atoms.index(c) 
          if j not in tmp:
            f.write(f"{elements[j]:>3s}{coords[j][0]:>14.6f}{coords[j][1]:>14.6f}{coords[j][2]:>14.6f}\n")
            newtypes.append(types[j])
            tmp.append(c)
  os.system("babel tmp.xyz tmp.txyz 2>/dev/null")
  lines = open("tmp.txyz").readlines()[1:]
  with open(txyz + "_2", 'w') as f:
    f.write(f"{len(atoms):>6d} Generated by lChemFileEditor.py\n")
    for t, line in zip(newtypes, lines):
      d = line.split()
      constr = ''
      for s in d[6:]:
        constr += f"{s:>6s}"
      newlinestr = f"{d[0]:>6s}{d[1]:>3s}  {float(d[2]):12.6f}{float(d[3]):12.6f}{float(d[4]):12.6f}{t:>6s}" + constr + "\n"
      f.write(newlinestr)
  os.remove("tmp.xyz")
  os.remove("tmp.txyz")
  return


def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('-i',dest='input',help="Input file: can be pdb or tinker xyz file", required=True)  
  parser.add_argument('-m',dest='mode',help="split/nicer", default = "nicer", type=str.upper)  
  args = vars(parser.parse_args())
  global inp
  inp = args["input"]
  mode = args["mode"]
  if inp.endswith(".pdb"):
    if mode == "SPLIT":
      print(f"Splitting PDB file: {inp}")
      splitpdb(inp)
    else:
      print("Splitting and Combining PDB file(s)")
      splitpdb(inp)
      combinepdbs()
  elif (inp.endswith(".xyz") or inp.endswith(".txyz")):
    if mode == "SPLIT":
      print(f"Splitting tinker xyz file: {inp}")
      splittxyz(inp)
    else:
      print("Writting a nicer tinker xyz file")
      nicertxyz(inp)
  else:
    sys.exit("Error: only PDB and Tinker XYZ files are supported")
  return

if __name__ == "__main__":
  main()
