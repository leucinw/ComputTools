
#===================================
#        Chengwen Liu              #
#      liuchw2010@gmail.com        #
#   University of Texas at Austin  #
#===================================

import os
import sys
import argparse
import subprocess
import networkx as nx
import concurrent.futures 

def writexyz():
  g = nx.Graph()
  nodes = []
  edges = []
  atom_line = {}
  lines = open(txyz).readlines()
  for line in lines[1:]:
    d = line.split()
    atom_line[int(d[0])] = line
    if d[0] not in nodes: 
      nodes.append(int(d[0]))
    for c in d[6:]:
      s = sorted([int(d[0]), int(c)])
      if s not in edges:
        edges.append(s)
  
  g.add_nodes_from(nodes)
  g.add_edges_from(edges)
        
  monomers = nx.connected_components(g)
  monoid = 1
  dimerid = 1
  allatoms = []
  fname, _ = os.path.splitext(txyz)
  for m in monomers:
    atoms = sorted(list(m))
    allatoms.append(atoms)
    mononame = f"{fname}_m{monoid}.txyz"
    with open(mononame, 'w') as f:
      f.write(f"{len(atoms):>5d} Generated by lManyBodyEnergy.py\n")
      for a in atoms:
        f.write(atom_line[a])
    monoid += 1
   
  for i in range(0, len(allatoms)-1, 1):
    iatoms = allatoms[i] 
    for j in range(i+1, len(allatoms), 1):
      jatoms = allatoms[j]
      dimername = f"{fname}_d{dimerid}.txyz"
      dimerid += 1
      with open(dimername, 'w') as f:
        f.write(f"{len(iatoms)+len(jatoms):>5d} Generated by lManyBodyEnergy.py\n")
        for a in iatoms:
          f.write(atom_line[a])
        for a in jatoms:
          f.write(atom_line[a])
  return

def getenergy(xyz):
  anacmd = f"$TINKER8C8/analyze.x {xyz} -k tinker.key E | grep 'Total Potential Energy'"
  anaout = subprocess.check_output(anacmd, shell=True).decode("utf-8")
  e = float(anaout.split()[-2]) 
  return {xyz:e}

def nbodyenergy():
  if nbody == 3:
    fname, _ = os.path.splitext(txyz) 
    files = [txyz]
    for i in [1,2,3]:
      files.append(fname + f"_d{i}.txyz")
    for i in [1,2,3]:
      files.append(fname + f"_m{i}.txyz")
    
    file_energy = dict(zip(files, [0,0,0,0,0,0,0])) 
    jobs = []
    with open("tinker.key", "w") as f:
      f.write(f"parameters {prm}\n")
      f.write("openmp-threads 2\n")
      f.write("digits 8\n")
      f.write("angleterm none\n")
      f.write("bondterm none\n")
      f.write("strbndterm none\n")
      f.write("opbendterm none\n")
      f.write("torsionterm none\n")

    with concurrent.futures.ProcessPoolExecutor() as executor:
      results = [executor.submit(getenergy, f) for f in files]
      for f in concurrent.futures.as_completed(results):
        jobs.append(f.result())
        file_energy.update(f.result()) 
    [f1,f2,f3,f4,f5,f6,f7] = files
    # E123 - (E12 + E13 + E23) + (E1 + E2 + E3)
    nbene = file_energy[f1] - (file_energy[f2] +  file_energy[f3] + file_energy[f4]) + (file_energy[f5] + file_energy[f6] + file_energy[f7])
    print(f"{txyz}  {nbene:.4f}")
  return

if __name__ == "__main__":
  parser = argparse.ArgumentParser()
  parser.add_argument('-i', dest = 'txyz',  help = "Tinker xyz file", required=True)  
  parser.add_argument('-p', dest = 'prm',  help = "Tinker prm file", required=True)  
  parser.add_argument('-n', dest = 'nbody', help = "Can be 2,3,4-body",default = 3, type=int)  
  args = vars(parser.parse_args())

  global txyz, prm, nbody 
  txyz = args["txyz"]
  prm = args["prm"]
  nbody = args["nbody"]
  writexyz()
  nbodyenergy()