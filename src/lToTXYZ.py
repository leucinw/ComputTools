
#===================================
#        Chengwen Liu              #
#      liuchw2010@gmail.com        #
#   University of Texas at Austin  #
#===================================

import os
import sys
import argparse
import numpy as np

# color
RED = '\033[91m'
GREEN = '\033[92m'
ENDC = '\033[0m'

def fingerprint(TXYZ):
  fprints = []
  atoms, elements = np.loadtxt(TXYZ, usecols=(0,1), dtype='str', skiprows=1, unpack=True)
  connections = []
  for line in open(TXYZ).readlines()[1:]:
    d = line.split()
    connections.append(d[6:])
  
  atom_ele_dict = dict(zip(atoms, elements))
  atom_con_dict = {}
  for atom, con in zip(atoms,connections):
    con_ele = [atom_ele_dict[c] for c in con] 
    constr = ''.join(sorted(con_ele)) 
    atom_con_dict[atom] = constr

  level = 5 
  if level > 1:
    atom_con_dict2 = {}
    for atom, con in zip(atoms,connections):
      eles = []
      cons = []
      for c in con:
        eles.append(atom_ele_dict[c])
        cons.append(c)
      cons = [x for _,x in sorted(zip(eles,cons))]
      newstr = ''.join([atom_con_dict[c] for c in cons])
      atom_con_dict2[atom] = ''.join(sorted(newstr))

  # level 3 is good for chain molecules 
  if level > 2:
    atom_con_dict3 = {}
    for atom, con in zip(atoms,connections):
      eles = []
      cons = []
      for c in con:
        eles.append(atom_ele_dict[c])
        cons.append(c)
      cons = [x for _,x in sorted(zip(eles,cons))]
      newstr = ''.join([atom_con_dict2[c] for c in cons])
      atom_con_dict3[atom] = ''.join(sorted(newstr))

  # level 4 is needed for ring molecules 
  if level > 3:
    atom_con_dict4 = {}
    for atom, con in zip(atoms,connections):
      eles = []
      cons = []
      for c in con:
        eles.append(atom_ele_dict[c])
        cons.append(c)
      cons = [x for _,x in sorted(zip(eles,cons))]
      newstr = ''.join([atom_con_dict3[c] for c in cons])
      atom_con_dict4[atom] = ''.join(sorted(newstr))
  
  if level > 4:
    atom_con_dict5 = {}
    for atom, con in zip(atoms,connections):
      eles = []
      cons = []
      for c in con:
        eles.append(atom_ele_dict[c])
        cons.append(c)
      cons = [x for _,x in sorted(zip(eles,cons))]
      newstr = ''.join([atom_con_dict4[c] for c in cons])
      atom_con_dict5[atom] = ''.join(sorted(newstr))
  
  for atom in atoms:
    fprints.append(atom_ele_dict[atom] + '-' + str(''.join(sorted(atom_con_dict[atom] + atom_con_dict2[atom] + atom_con_dict3[atom] + atom_con_dict4[atom] + atom_con_dict5[atom]))))
  
  return fprints

def babel(fi):
  ot = 'txyz' 
  fo = ftxyz
  if (ti in ["XYZ", "G09", "QCOUT", "MOL", "MOL2", "PDB", "SDF"]):
    cmdstr = f"babel -i{ti.lower()} {fi} -o{ot} {fo}"
  elif ti == "PSI4":
    psi42xyz(fi, fxyz)
    cmdstr = f"babel -ixyz {fxyz} -o{ot} {fo}"
  elif ti == "PSI4OUT":
    psiout2xyz(fi, fxyz)
    cmdstr = f"babel -ixyz {fxyz} -o{ot} {fo}"
  elif ti == "TXYZ":
    pass
    cmdstr = 'echo "using the txyz file provided "'
  else:
    sys.exit(RED + f"File format {ti} not supported!"+ ENDC)
  
  print(GREEN + f"Running {cmdstr}" +ENDC)
  os.system(cmdstr)
 
  '''read the txyz file to construct atom type list'''
  types = [] 
  record = {}
  idx = 401 
  fps = fingerprint(ftxyz)
  for fp in fps:
    if fp not in record:
      types.append(str(idx))
      record[fp] = idx
      idx += 1
    else:
      types.append(str(record[fp])) 
  return types


def psiout2xyz(finp, fout):
  lines = open(finp).readlines()
  for n in range(len(lines)):
    if "Final optimized geometry " in lines[n]:
      break
  atoms = []
  coords = []
  for n in range(n+6, len(lines)):
    if lines[n] == "\n":
      break
    dd = lines[n].split()
    atoms.append(dd[0])
    coords.append(dd[1:4])
  with open(fout, "w") as f:
    f.write("%3s\nconverted from %s\n"%(len(atoms), finp))
    for n in range(len(atoms)):
      f.write("%3s%12.6f%12.6f%12.6f\n"%(atoms[n], float(coords[n][0]), float(coords[n][1]), float(coords[n][2])))
  return

def psi42xyz(finp, fout):
  lines = open(finp).readlines()
  for n in range(len(lines)):
    if "MOLECULE" in lines[n].upper():
      break
  atoms = []
  coords = []
  for n in range(n+2, len(lines)):
    if "}" in lines[n]:
      break
    dd = lines[n].split()
    atoms.append(dd[0])
    coords.append(dd[1:4])
  with open(fout, "w") as f:
    f.write("%3s\nconverted from %s\n"%(len(atoms), finp))
    for n in range(len(atoms)):
      f.write("%3s%12.6f%12.6f%12.6f\n"%(atoms[n], float(coords[n][0]), float(coords[n][1]), float(coords[n][2])))
  return

def ToTXYZ(fi, types):
  babel(fi)
  lines = open(ftxyz).readlines()
  with open(ftxyz,"w") as f:
    f.write(f"{lines[0].split()[0]} Generated by lToTXYZ.py\n")
    for i in range(len(lines)):
      if i != 0:
        ss = lines[i].split()
        s = '   '.join(ss[6:])
        f.write(f"{ss[0]:5s}{ss[1]:3s}{float(ss[2]):10.5f}{float(ss[3]):10.5f}{float(ss[4]):10.5f} {types[i-1]:5s}{s}\n")
  return

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('-i', dest = 'inp', required=True, help="input filename")  
  parser.add_argument('-t', dest = 'typ', required=True, choices = ["xyz", "g09", "qcout", "mol", "mol2", "psi4", "sdf", "pdb", "psi4out", "txyz"])
  args = vars(parser.parse_args())
  global ti,ftxyz,fmm2,fmna
  fi = args["inp"]
  ti = args["typ"].upper()
  fin = os.path.splitext(fi)[0]
  ftxyz = fin + ".txyz"
  types = babel(fi)
  ToTXYZ(fi, types)
  return

if __name__ == "__main__":
  main()
