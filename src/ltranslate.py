
#===================================
#        Chengwen Liu              #
#      liuchw2010@gmail.com        #
#   University of Texas at Austin  #
#===================================

import argparse
import numpy as np

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('-xyz',  dest = 'xyzfile', required=True)  
  parser.add_argument('-p1',  dest = "points1", nargs='+', required=True) 
  parser.add_argument('-p2',  dest = "points2", nargs='+', required=True) 
  parser.add_argument('-n1',  dest = 'nfirst', required=True)
  parser.add_argument('-d',   dest = 'distance', default=1.0)
  args = vars(parser.parse_args())
  xyzfile = args["xyzfile"]
  n1 = int(args["nfirst"])
  p1 = args["points1"]
  p2 = args["points2"]
  dist_ratio = float(args["distance"])

  # read atoms and coordinate from xyz file
  def readXYZ(xyz):
    atoms  = np.loadtxt(xyz, usecols=(0,), dtype='str', unpack=True, skiprows=2)
    coords = np.loadtxt(xyz, usecols=(1,2,3), dtype='float', unpack=False, skiprows=2)
    return atoms,coords

  # calculate distance between two atoms 
  def distance(coord1, coord2):
    coord1 = np.array(coord1)
    coord2 = np.array(coord2)
    dist = np.sqrt(np.square(coord1-coord2).sum()) 
    return dist
  # calculate geometric center of a bunch of atoms
  def geomCenter(coords):
    coords = np.array(coords)
    geocent = [coords[:,0].mean(), \
               coords[:,1].mean(), \
               coords[:,2].mean()]
    return geocent
  
  # first and second molecule
  atoms, coords = readXYZ(xyzfile)
  atoms1, atoms2 = atoms[:n1], atoms[n1:]
  coord1, coord2 = coords[:n1], coords[n1:]
  refCoord_1 = []; refCoord_2 = []

  # calculate geomCenter of specified atoms
  for i in p1:
    refCoord_1.append(coord1[int(i)-1])
  for i in p2:
    refCoord_2.append(coord2[int(i)-1-n1])
  geocent_1 = geomCenter(refCoord_1)
  geocent_2 = geomCenter(refCoord_2)

  geocent_dist = distance(geocent_1, geocent_2)
  geocent_vector = [geocent_2[0]- geocent_1[0], 
                    geocent_2[1]- geocent_1[1], 
                    geocent_2[2]- geocent_1[2],]

  trans_vector = [0, 0, 0]

  # A speciall case where two molecules overlap
  if geocent_dist == 0: 
    for i in range(len(coord2)):
      coord2[i][0] += 1.0
    geocent_2 = geomCenter(coord2)
    geocent_dist = distance(geocent_1, geocent_2)
    geocent_vector = [geocent_2[0]- geocent_1[0], 
                      geocent_2[1]- geocent_1[1], 
                      geocent_2[2]- geocent_1[2],]

  # calculate translation vector
  trans_vector = [geocent_vector[0]*(dist_ratio-1.0),
                  geocent_vector[1]*(dist_ratio-1.0),
                  geocent_vector[2]*(dist_ratio-1.0), ]

  # translate second molecule
  for i in range(len(coord2)):
    for j in range(3):
      coord2[i][j] += trans_vector[j]

  # write the final xyz file
  filename = xyzfile.split(".xyz")[0] + "_%s.xyz"%str("%4.2f"%dist_ratio)
  with open(filename, "w") as f:
    f.write("%3s\nGenerated by ltranslate.py\n"%len(atoms))
    for atom, coord in zip(atoms1, coord1):
      f.write("%3s%10.5f%10.5f%10.5f\n"%(atom, coord[0], coord[1], coord[2]))
    for atom, coord in zip(atoms2, coord2):
      f.write("%3s%10.5f%10.5f%10.5f\n"%(atom, coord[0], coord[1], coord[2]))
  print(f"DONE with {filename}!")
  return 

if __name__ == "__main__":
  main()
